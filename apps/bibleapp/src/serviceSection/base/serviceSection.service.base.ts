/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ServiceSection as PrismaServiceSection } from "@prisma/client";

export class ServiceSectionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ServiceSectionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.serviceSection.count(args);
  }

  async serviceSections<T extends Prisma.ServiceSectionFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ServiceSectionFindManyArgs>
  ): Promise<PrismaServiceSection[]> {
    return this.prisma.serviceSection.findMany<Prisma.ServiceSectionFindManyArgs>(
      args
    );
  }
  async serviceSection<T extends Prisma.ServiceSectionFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ServiceSectionFindUniqueArgs>
  ): Promise<PrismaServiceSection | null> {
    return this.prisma.serviceSection.findUnique(args);
  }
  async createServiceSection<T extends Prisma.ServiceSectionCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ServiceSectionCreateArgs>
  ): Promise<PrismaServiceSection> {
    return this.prisma.serviceSection.create<T>(args);
  }
  async updateServiceSection<T extends Prisma.ServiceSectionUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ServiceSectionUpdateArgs>
  ): Promise<PrismaServiceSection> {
    return this.prisma.serviceSection.update<T>(args);
  }
  async deleteServiceSection<T extends Prisma.ServiceSectionDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ServiceSectionDeleteArgs>
  ): Promise<PrismaServiceSection> {
    return this.prisma.serviceSection.delete(args);
  }
}
