/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ServiceSection } from "./ServiceSection";
import { ServiceSectionCountArgs } from "./ServiceSectionCountArgs";
import { ServiceSectionFindManyArgs } from "./ServiceSectionFindManyArgs";
import { ServiceSectionFindUniqueArgs } from "./ServiceSectionFindUniqueArgs";
import { DeleteServiceSectionArgs } from "./DeleteServiceSectionArgs";
import { ServiceSectionService } from "../serviceSection.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ServiceSection)
export class ServiceSectionResolverBase {
  constructor(
    protected readonly service: ServiceSectionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ServiceSection",
    action: "read",
    possession: "any",
  })
  async _serviceSectionsMeta(
    @graphql.Args() args: ServiceSectionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ServiceSection])
  @nestAccessControl.UseRoles({
    resource: "ServiceSection",
    action: "read",
    possession: "any",
  })
  async serviceSections(
    @graphql.Args() args: ServiceSectionFindManyArgs
  ): Promise<ServiceSection[]> {
    return this.service.serviceSections(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ServiceSection, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ServiceSection",
    action: "read",
    possession: "own",
  })
  async serviceSection(
    @graphql.Args() args: ServiceSectionFindUniqueArgs
  ): Promise<ServiceSection | null> {
    const result = await this.service.serviceSection(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ServiceSection)
  @nestAccessControl.UseRoles({
    resource: "ServiceSection",
    action: "delete",
    possession: "any",
  })
  async deleteServiceSection(
    @graphql.Args() args: DeleteServiceSectionArgs
  ): Promise<ServiceSection | null> {
    try {
      return await this.service.deleteServiceSection(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
