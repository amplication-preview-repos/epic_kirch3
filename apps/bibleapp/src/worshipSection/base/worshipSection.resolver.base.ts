/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { WorshipSection } from "./WorshipSection";
import { WorshipSectionCountArgs } from "./WorshipSectionCountArgs";
import { WorshipSectionFindManyArgs } from "./WorshipSectionFindManyArgs";
import { WorshipSectionFindUniqueArgs } from "./WorshipSectionFindUniqueArgs";
import { DeleteWorshipSectionArgs } from "./DeleteWorshipSectionArgs";
import { WorshipSectionService } from "../worshipSection.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => WorshipSection)
export class WorshipSectionResolverBase {
  constructor(
    protected readonly service: WorshipSectionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "WorshipSection",
    action: "read",
    possession: "any",
  })
  async _worshipSectionsMeta(
    @graphql.Args() args: WorshipSectionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [WorshipSection])
  @nestAccessControl.UseRoles({
    resource: "WorshipSection",
    action: "read",
    possession: "any",
  })
  async worshipSections(
    @graphql.Args() args: WorshipSectionFindManyArgs
  ): Promise<WorshipSection[]> {
    return this.service.worshipSections(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => WorshipSection, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "WorshipSection",
    action: "read",
    possession: "own",
  })
  async worshipSection(
    @graphql.Args() args: WorshipSectionFindUniqueArgs
  ): Promise<WorshipSection | null> {
    const result = await this.service.worshipSection(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => WorshipSection)
  @nestAccessControl.UseRoles({
    resource: "WorshipSection",
    action: "delete",
    possession: "any",
  })
  async deleteWorshipSection(
    @graphql.Args() args: DeleteWorshipSectionArgs
  ): Promise<WorshipSection | null> {
    try {
      return await this.service.deleteWorshipSection(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
