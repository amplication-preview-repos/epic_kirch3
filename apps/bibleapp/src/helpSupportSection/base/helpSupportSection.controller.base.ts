/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { HelpSupportSectionService } from "../helpSupportSection.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { HelpSupportSectionCreateInput } from "./HelpSupportSectionCreateInput";
import { HelpSupportSection } from "./HelpSupportSection";
import { HelpSupportSectionFindManyArgs } from "./HelpSupportSectionFindManyArgs";
import { HelpSupportSectionWhereUniqueInput } from "./HelpSupportSectionWhereUniqueInput";
import { HelpSupportSectionUpdateInput } from "./HelpSupportSectionUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class HelpSupportSectionControllerBase {
  constructor(
    protected readonly service: HelpSupportSectionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: HelpSupportSection })
  @nestAccessControl.UseRoles({
    resource: "HelpSupportSection",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createHelpSupportSection(
    @common.Body() data: HelpSupportSectionCreateInput
  ): Promise<HelpSupportSection> {
    return await this.service.createHelpSupportSection({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [HelpSupportSection] })
  @ApiNestedQuery(HelpSupportSectionFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "HelpSupportSection",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async helpSupportSections(
    @common.Req() request: Request
  ): Promise<HelpSupportSection[]> {
    const args = plainToClass(HelpSupportSectionFindManyArgs, request.query);
    return this.service.helpSupportSections({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: HelpSupportSection })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "HelpSupportSection",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async helpSupportSection(
    @common.Param() params: HelpSupportSectionWhereUniqueInput
  ): Promise<HelpSupportSection | null> {
    const result = await this.service.helpSupportSection({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: HelpSupportSection })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "HelpSupportSection",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateHelpSupportSection(
    @common.Param() params: HelpSupportSectionWhereUniqueInput,
    @common.Body() data: HelpSupportSectionUpdateInput
  ): Promise<HelpSupportSection | null> {
    try {
      return await this.service.updateHelpSupportSection({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: HelpSupportSection })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "HelpSupportSection",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteHelpSupportSection(
    @common.Param() params: HelpSupportSectionWhereUniqueInput
  ): Promise<HelpSupportSection | null> {
    try {
      return await this.service.deleteHelpSupportSection({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
