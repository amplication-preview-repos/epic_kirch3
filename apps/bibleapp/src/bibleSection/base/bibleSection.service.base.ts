/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, BibleSection as PrismaBibleSection } from "@prisma/client";

export class BibleSectionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.BibleSectionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.bibleSection.count(args);
  }

  async bibleSections<T extends Prisma.BibleSectionFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.BibleSectionFindManyArgs>
  ): Promise<PrismaBibleSection[]> {
    return this.prisma.bibleSection.findMany<Prisma.BibleSectionFindManyArgs>(
      args
    );
  }
  async bibleSection<T extends Prisma.BibleSectionFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.BibleSectionFindUniqueArgs>
  ): Promise<PrismaBibleSection | null> {
    return this.prisma.bibleSection.findUnique(args);
  }
  async createBibleSection<T extends Prisma.BibleSectionCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BibleSectionCreateArgs>
  ): Promise<PrismaBibleSection> {
    return this.prisma.bibleSection.create<T>(args);
  }
  async updateBibleSection<T extends Prisma.BibleSectionUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BibleSectionUpdateArgs>
  ): Promise<PrismaBibleSection> {
    return this.prisma.bibleSection.update<T>(args);
  }
  async deleteBibleSection<T extends Prisma.BibleSectionDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.BibleSectionDeleteArgs>
  ): Promise<PrismaBibleSection> {
    return this.prisma.bibleSection.delete(args);
  }
}
