/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, GrowthSection as PrismaGrowthSection } from "@prisma/client";

export class GrowthSectionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.GrowthSectionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.growthSection.count(args);
  }

  async growthSections<T extends Prisma.GrowthSectionFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.GrowthSectionFindManyArgs>
  ): Promise<PrismaGrowthSection[]> {
    return this.prisma.growthSection.findMany<Prisma.GrowthSectionFindManyArgs>(
      args
    );
  }
  async growthSection<T extends Prisma.GrowthSectionFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.GrowthSectionFindUniqueArgs>
  ): Promise<PrismaGrowthSection | null> {
    return this.prisma.growthSection.findUnique(args);
  }
  async createGrowthSection<T extends Prisma.GrowthSectionCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.GrowthSectionCreateArgs>
  ): Promise<PrismaGrowthSection> {
    return this.prisma.growthSection.create<T>(args);
  }
  async updateGrowthSection<T extends Prisma.GrowthSectionUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.GrowthSectionUpdateArgs>
  ): Promise<PrismaGrowthSection> {
    return this.prisma.growthSection.update<T>(args);
  }
  async deleteGrowthSection<T extends Prisma.GrowthSectionDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.GrowthSectionDeleteArgs>
  ): Promise<PrismaGrowthSection> {
    return this.prisma.growthSection.delete(args);
  }
}
