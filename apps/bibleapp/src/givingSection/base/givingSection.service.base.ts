/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, GivingSection as PrismaGivingSection } from "@prisma/client";

export class GivingSectionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.GivingSectionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.givingSection.count(args);
  }

  async givingSections<T extends Prisma.GivingSectionFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.GivingSectionFindManyArgs>
  ): Promise<PrismaGivingSection[]> {
    return this.prisma.givingSection.findMany<Prisma.GivingSectionFindManyArgs>(
      args
    );
  }
  async givingSection<T extends Prisma.GivingSectionFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.GivingSectionFindUniqueArgs>
  ): Promise<PrismaGivingSection | null> {
    return this.prisma.givingSection.findUnique(args);
  }
  async createGivingSection<T extends Prisma.GivingSectionCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.GivingSectionCreateArgs>
  ): Promise<PrismaGivingSection> {
    return this.prisma.givingSection.create<T>(args);
  }
  async updateGivingSection<T extends Prisma.GivingSectionUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.GivingSectionUpdateArgs>
  ): Promise<PrismaGivingSection> {
    return this.prisma.givingSection.update<T>(args);
  }
  async deleteGivingSection<T extends Prisma.GivingSectionDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.GivingSectionDeleteArgs>
  ): Promise<PrismaGivingSection> {
    return this.prisma.givingSection.delete(args);
  }
}
