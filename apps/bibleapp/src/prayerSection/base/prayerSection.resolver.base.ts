/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { PrayerSection } from "./PrayerSection";
import { PrayerSectionCountArgs } from "./PrayerSectionCountArgs";
import { PrayerSectionFindManyArgs } from "./PrayerSectionFindManyArgs";
import { PrayerSectionFindUniqueArgs } from "./PrayerSectionFindUniqueArgs";
import { CreatePrayerSectionArgs } from "./CreatePrayerSectionArgs";
import { UpdatePrayerSectionArgs } from "./UpdatePrayerSectionArgs";
import { DeletePrayerSectionArgs } from "./DeletePrayerSectionArgs";
import { PrayerSectionService } from "../prayerSection.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => PrayerSection)
export class PrayerSectionResolverBase {
  constructor(
    protected readonly service: PrayerSectionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PrayerSection",
    action: "read",
    possession: "any",
  })
  async _prayerSectionsMeta(
    @graphql.Args() args: PrayerSectionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PrayerSection])
  @nestAccessControl.UseRoles({
    resource: "PrayerSection",
    action: "read",
    possession: "any",
  })
  async prayerSections(
    @graphql.Args() args: PrayerSectionFindManyArgs
  ): Promise<PrayerSection[]> {
    return this.service.prayerSections(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PrayerSection, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PrayerSection",
    action: "read",
    possession: "own",
  })
  async prayerSection(
    @graphql.Args() args: PrayerSectionFindUniqueArgs
  ): Promise<PrayerSection | null> {
    const result = await this.service.prayerSection(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PrayerSection)
  @nestAccessControl.UseRoles({
    resource: "PrayerSection",
    action: "create",
    possession: "any",
  })
  async createPrayerSection(
    @graphql.Args() args: CreatePrayerSectionArgs
  ): Promise<PrayerSection> {
    return await this.service.createPrayerSection({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PrayerSection)
  @nestAccessControl.UseRoles({
    resource: "PrayerSection",
    action: "update",
    possession: "any",
  })
  async updatePrayerSection(
    @graphql.Args() args: UpdatePrayerSectionArgs
  ): Promise<PrayerSection | null> {
    try {
      return await this.service.updatePrayerSection({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PrayerSection)
  @nestAccessControl.UseRoles({
    resource: "PrayerSection",
    action: "delete",
    possession: "any",
  })
  async deletePrayerSection(
    @graphql.Args() args: DeletePrayerSectionArgs
  ): Promise<PrayerSection | null> {
    try {
      return await this.service.deletePrayerSection(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
