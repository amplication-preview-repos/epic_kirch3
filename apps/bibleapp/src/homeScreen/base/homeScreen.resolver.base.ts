/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { HomeScreen } from "./HomeScreen";
import { HomeScreenCountArgs } from "./HomeScreenCountArgs";
import { HomeScreenFindManyArgs } from "./HomeScreenFindManyArgs";
import { HomeScreenFindUniqueArgs } from "./HomeScreenFindUniqueArgs";
import { CreateHomeScreenArgs } from "./CreateHomeScreenArgs";
import { UpdateHomeScreenArgs } from "./UpdateHomeScreenArgs";
import { DeleteHomeScreenArgs } from "./DeleteHomeScreenArgs";
import { HomeScreenService } from "../homeScreen.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => HomeScreen)
export class HomeScreenResolverBase {
  constructor(
    protected readonly service: HomeScreenService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "HomeScreen",
    action: "read",
    possession: "any",
  })
  async _homeScreensMeta(
    @graphql.Args() args: HomeScreenCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [HomeScreen])
  @nestAccessControl.UseRoles({
    resource: "HomeScreen",
    action: "read",
    possession: "any",
  })
  async homeScreens(
    @graphql.Args() args: HomeScreenFindManyArgs
  ): Promise<HomeScreen[]> {
    return this.service.homeScreens(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => HomeScreen, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "HomeScreen",
    action: "read",
    possession: "own",
  })
  async homeScreen(
    @graphql.Args() args: HomeScreenFindUniqueArgs
  ): Promise<HomeScreen | null> {
    const result = await this.service.homeScreen(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => HomeScreen)
  @nestAccessControl.UseRoles({
    resource: "HomeScreen",
    action: "create",
    possession: "any",
  })
  async createHomeScreen(
    @graphql.Args() args: CreateHomeScreenArgs
  ): Promise<HomeScreen> {
    return await this.service.createHomeScreen({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => HomeScreen)
  @nestAccessControl.UseRoles({
    resource: "HomeScreen",
    action: "update",
    possession: "any",
  })
  async updateHomeScreen(
    @graphql.Args() args: UpdateHomeScreenArgs
  ): Promise<HomeScreen | null> {
    try {
      return await this.service.updateHomeScreen({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => HomeScreen)
  @nestAccessControl.UseRoles({
    resource: "HomeScreen",
    action: "delete",
    possession: "any",
  })
  async deleteHomeScreen(
    @graphql.Args() args: DeleteHomeScreenArgs
  ): Promise<HomeScreen | null> {
    try {
      return await this.service.deleteHomeScreen(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
