/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ProfileSection } from "./ProfileSection";
import { ProfileSectionCountArgs } from "./ProfileSectionCountArgs";
import { ProfileSectionFindManyArgs } from "./ProfileSectionFindManyArgs";
import { ProfileSectionFindUniqueArgs } from "./ProfileSectionFindUniqueArgs";
import { DeleteProfileSectionArgs } from "./DeleteProfileSectionArgs";
import { ProfileSectionService } from "../profileSection.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ProfileSection)
export class ProfileSectionResolverBase {
  constructor(
    protected readonly service: ProfileSectionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ProfileSection",
    action: "read",
    possession: "any",
  })
  async _profileSectionsMeta(
    @graphql.Args() args: ProfileSectionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ProfileSection])
  @nestAccessControl.UseRoles({
    resource: "ProfileSection",
    action: "read",
    possession: "any",
  })
  async profileSections(
    @graphql.Args() args: ProfileSectionFindManyArgs
  ): Promise<ProfileSection[]> {
    return this.service.profileSections(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ProfileSection, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ProfileSection",
    action: "read",
    possession: "own",
  })
  async profileSection(
    @graphql.Args() args: ProfileSectionFindUniqueArgs
  ): Promise<ProfileSection | null> {
    const result = await this.service.profileSection(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ProfileSection)
  @nestAccessControl.UseRoles({
    resource: "ProfileSection",
    action: "delete",
    possession: "any",
  })
  async deleteProfileSection(
    @graphql.Args() args: DeleteProfileSectionArgs
  ): Promise<ProfileSection | null> {
    try {
      return await this.service.deleteProfileSection(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
